/**
 * Comprehensive Cache Utilities for TwillCMS
 * Provides multiple caching strategies with TTL support and memory management
 */

import type { ComputedRef, Ref } from 'vue'

export interface CacheItem<T = any> {
  data: T
  timestamp: number
  ttl: number
  key: string
  size?: number
}

export interface CacheOptions {
  ttl?: number // Time to live in milliseconds
  maxSize?: number // Maximum cache size in bytes
  maxItems?: number // Maximum number of items
  storageType?: 'memory' | 'localStorage' | 'sessionStorage'
  compress?: boolean
}

export interface CacheStats {
  hits: number
  misses: number
  size: number
  itemCount: number
  hitRate: number
}

/**
 * Abstract Storage Interface for different storage types
 */
export abstract class CacheStorage {
  abstract get<T>(key: string): CacheItem<T> | null
  abstract set<T>(key: string, item: CacheItem<T>): boolean
  abstract delete(key: string): boolean
  abstract clear(): void
  abstract keys(): string[]
  abstract size(): number
}

/**
 * Memory-based cache storage
 */
export class MemoryStorage extends CacheStorage {
  private cache = new Map<string, CacheItem>()
  private maxSize: number
  private maxItems: number

  constructor(maxSize = 50 * 1024 * 1024, maxItems = 1000) { // 50MB default
    super()
    this.maxSize = maxSize
    this.maxItems = maxItems
  }

  get<T>(key: string): CacheItem<T> | null {
    const item = this.cache.get(key)
    if (!item) return null
    
    // Check TTL
    if (this.isExpired(item)) {
      this.cache.delete(key)
      return null
    }
    
    return item as CacheItem<T>
  }

  set<T>(key: string, item: CacheItem<T>): boolean {
    // Check if we need to evict items
    this.evictIfNeeded()
    
    this.cache.set(key, item)
    return true
  }

  delete(key: string): boolean {
    return this.cache.delete(key)
  }

  clear(): void {
    this.cache.clear()
  }

  keys(): string[] {
    return Array.from(this.cache.keys())
  }

  size(): number {
    let totalSize = 0
    for (const item of this.cache.values()) {
      totalSize += item.size || this.estimateSize(item)
    }
    return totalSize
  }

  private isExpired(item: CacheItem): boolean {
    return Date.now() - item.timestamp > item.ttl
  }

  private evictIfNeeded(): void {
    // Remove expired items first
    for (const [key, item] of this.cache.entries()) {
      if (this.isExpired(item)) {
        this.cache.delete(key)
      }
    }

    // If still over limits, remove oldest items
    while (this.cache.size >= this.maxItems || this.size() >= this.maxSize) {
      const oldestKey = this.cache.keys().next().value
      if (oldestKey) {
        this.cache.delete(oldestKey)
      } else {
        break
      }
    }
  }

  private estimateSize(item: CacheItem): number {
    return JSON.stringify(item).length * 2 // Rough estimate (2 bytes per char)
  }
}

/**
 * Browser storage (localStorage/sessionStorage) based cache
 */
export class BrowserStorage extends CacheStorage {
  private storage: Storage
  private prefix: string

  constructor(storageType: 'localStorage' | 'sessionStorage' = 'localStorage', prefix = 'twill_cache_') {
    super()
    this.storage = storageType === 'localStorage' ? localStorage : sessionStorage
    this.prefix = prefix
  }

  get<T>(key: string): CacheItem<T> | null {
    try {
      const rawData = this.storage.getItem(this.prefix + key)
      if (!rawData) return null
      
      const item: CacheItem<T> = JSON.parse(rawData)
      
      // Check TTL
      if (Date.now() - item.timestamp > item.ttl) {
        this.storage.removeItem(this.prefix + key)
        return null
      }
      
      return item
    } catch (error) {
      console.warn(`Cache: Failed to get item ${key}:`, error)
      return null
    }
  }

  set<T>(key: string, item: CacheItem<T>): boolean {
    try {
      this.storage.setItem(this.prefix + key, JSON.stringify(item))
      return true
    } catch (error) {
      console.warn(`Cache: Failed to set item ${key}:`, error)
      
      // Try to free up space by removing expired items
      this.cleanup()
      
      try {
        this.storage.setItem(this.prefix + key, JSON.stringify(item))
        return true
      } catch (secondError) {
        console.error(`Cache: Still failed to set item ${key} after cleanup:`, secondError)
        return false
      }
    }
  }

  delete(key: string): boolean {
    this.storage.removeItem(this.prefix + key)
    return true
  }

  clear(): void {
    const keysToRemove: string[] = []
    for (let i = 0; i < this.storage.length; i++) {
      const key = this.storage.key(i)
      if (key && key.startsWith(this.prefix)) {
        keysToRemove.push(key)
      }
    }
    keysToRemove.forEach(key => this.storage.removeItem(key))
  }

  keys(): string[] {
    const keys: string[] = []
    for (let i = 0; i < this.storage.length; i++) {
      const key = this.storage.key(i)
      if (key && key.startsWith(this.prefix)) {
        keys.push(key.substring(this.prefix.length))
      }
    }
    return keys
  }

  size(): number {
    let totalSize = 0
    for (const key of this.keys()) {
      const item = this.storage.getItem(this.prefix + key)
      if (item) {
        totalSize += item.length * 2 // Rough estimate
      }
    }
    return totalSize
  }

  private cleanup(): void {
    const expiredKeys: string[] = []
    for (const key of this.keys()) {
      const item = this.get(key)
      if (!item) {
        expiredKeys.push(key)
      }
    }
    expiredKeys.forEach(key => this.delete(key))
  }
}

/**
 * Main Cache Manager class
 */
export class CacheManager {
  private storage: CacheStorage
  private stats: CacheStats = {
    hits: 0,
    misses: 0,
    size: 0,
    itemCount: 0,
    hitRate: 0
  }
  private defaultTTL: number

  constructor(options: CacheOptions = {}) {
    this.defaultTTL = options.ttl || 5 * 60 * 1000 // 5 minutes default
    
    switch (options.storageType) {
      case 'memory':
        this.storage = new MemoryStorage(options.maxSize, options.maxItems)
        break
      case 'sessionStorage':
        this.storage = new BrowserStorage('sessionStorage')
        break
      case 'localStorage':
      default:
        this.storage = new BrowserStorage('localStorage')
        break
    }
  }

  /**
   * Get item from cache
   */
  get<T>(key: string): T | null {
    const item = this.storage.get<T>(key)
    
    if (item) {
      this.stats.hits++
      this.updateStats()
      return item.data
    } else {
      this.stats.misses++
      this.updateStats()
      return null
    }
  }

  /**
   * Set item in cache
   */
  set<T>(key: string, data: T, ttl?: number): boolean {
    const item: CacheItem<T> = {
      data,
      timestamp: Date.now(),
      ttl: ttl || this.defaultTTL,
      key,
      size: this.estimateSize(data)
    }

    const success = this.storage.set(key, item)
    this.updateStats()
    return success
  }

  /**
   * Delete item from cache
   */
  delete(key: string): boolean {
    const success = this.storage.delete(key)
    this.updateStats()
    return success
  }

  /**
   * Clear all cache
   */
  clear(): void {
    this.storage.clear()
    this.stats = {
      hits: 0,
      misses: 0,
      size: 0,
      itemCount: 0,
      hitRate: 0
    }
  }

  /**
   * Check if key exists and is not expired
   */
  has(key: string): boolean {
    return this.storage.get(key) !== null
  }

  /**
   * Get cache statistics
   */
  getStats(): CacheStats {
    return { ...this.stats }
  }

  /**
   * Get cache with fallback function
   */
  async getOrSet<T>(
    key: string, 
    fallback: () => Promise<T> | T, 
    ttl?: number
  ): Promise<T> {
    const cached = this.get<T>(key)
    if (cached !== null) {
      return cached
    }

    const data = await fallback()
    this.set(key, data, ttl)
    return data
  }

  /**
   * Invalidate cache entries by pattern
   */
  invalidatePattern(pattern: string | RegExp): number {
    const regex = typeof pattern === 'string' ? new RegExp(pattern) : pattern
    const keys = this.storage.keys().filter(key => regex.test(key))
    
    keys.forEach(key => this.storage.delete(key))
    this.updateStats()
    
    return keys.length
  }

  /**
   * Refresh cache entry (fetch new data and update cache)
   */
  async refresh<T>(key: string, fetcher: () => Promise<T> | T, ttl?: number): Promise<T> {
    const data = await fetcher()
    this.set(key, data, ttl)
    return data
  }

  private estimateSize(data: any): number {
    try {
      return JSON.stringify(data).length * 2
    } catch {
      return 1000 // Fallback estimate
    }
  }

  private updateStats(): void {
    this.stats.size = this.storage.size()
    this.stats.itemCount = this.storage.keys().length
    this.stats.hitRate = this.stats.hits / (this.stats.hits + this.stats.misses) || 0
  }
}

/**
 * Cache strategies
 */
export enum CacheStrategy {
  CACHE_FIRST = 'cache-first',
  NETWORK_FIRST = 'network-first',
  STALE_WHILE_REVALIDATE = 'stale-while-revalidate',
  NETWORK_ONLY = 'network-only',
  CACHE_ONLY = 'cache-only'
}

/**
 * Create pre-configured cache instances
 */
export const createCache = (options: CacheOptions = {}) => new CacheManager(options)

// Pre-configured cache instances
export const memoryCache = createCache({ storageType: 'memory', ttl: 5 * 60 * 1000 })
export const persistentCache = createCache({ storageType: 'localStorage', ttl: 24 * 60 * 60 * 1000 })
export const sessionCache = createCache({ storageType: 'sessionStorage', ttl: 30 * 60 * 1000 })

// Cache key generators
export const generateCacheKey = (prefix: string, params: Record<string, any>): string => {
  const sortedParams = Object.keys(params)
    .sort()
    .map(key => `${key}=${encodeURIComponent(String(params[key]))}`)
    .join('&')
  
  return `${prefix}:${sortedParams}`
}

export const generateApiCacheKey = (endpoint: string, params: Record<string, any> = {}): string => {
  return generateCacheKey(`api:${endpoint}`, params)
}

// Cache utilities for TwillCMS - Advanced caching system with TTL and memory management

// Cache entry interface
export interface CacheEntry<T = any> {
  data: T
  timestamp: number
  ttl: number
  hits: number
  size: number
}

// Cache configuration
export interface CacheConfig {
  defaultTTL: number
  maxSize: number
  maxMemoryUsage: number
  cleanupInterval: number
  storageTypes: ('memory' | 'localStorage' | 'sessionStorage')[]
}

// Default cache configuration
const DEFAULT_CONFIG: CacheConfig = {
  defaultTTL: 5 * 60 * 1000, // 5 minutes
  maxSize: 100,
  maxMemoryUsage: 10 * 1024 * 1024, // 10MB
  cleanupInterval: 60 * 1000, // 1 minute
  storageTypes: ['memory', 'localStorage']
}

// Storage abstraction
abstract class CacheStorage {
  abstract get<T>(key: string): CacheEntry<T> | null
  abstract set<T>(key: string, entry: CacheEntry<T>): void
  abstract delete(key: string): void
  abstract clear(): void
  abstract keys(): string[]
  abstract size(): number
}

// Memory storage implementation
class MemoryStorage extends CacheStorage {
  private cache = new Map<string, CacheEntry>()

  get<T>(key: string): CacheEntry<T> | null {
    return this.cache.get(key) || null
  }

  set<T>(key: string, entry: CacheEntry<T>): void {
    this.cache.set(key, entry)
  }

  delete(key: string): void {
    this.cache.delete(key)
  }

  clear(): void {
    this.cache.clear()
  }

  keys(): string[] {
    return Array.from(this.cache.keys())
  }

  size(): number {
    return this.cache.size
  }
}

// Browser storage implementation
class BrowserStorage extends CacheStorage {
  constructor(private storage: Storage) {
    super()
  }

  get<T>(key: string): CacheEntry<T> | null {
    try {
      const item = this.storage.getItem(`cache_${key}`)
      return item ? JSON.parse(item) : null
    } catch {
      return null
    }
  }

  set<T>(key: string, entry: CacheEntry<T>): void {
    try {
      this.storage.setItem(`cache_${key}`, JSON.stringify(entry))
    } catch {
      // Handle storage quota exceeded
      this.cleanup()
    }
  }

  delete(key: string): void {
    this.storage.removeItem(`cache_${key}`)
  }

  clear(): void {
    const keys = this.keys()
    keys.forEach(key => this.delete(key))
  }

  keys(): string[] {
    const keys: string[] = []
    for (let i = 0; i < this.storage.length; i++) {
      const key = this.storage.key(i)
      if (key?.startsWith('cache_')) {
        keys.push(key.substring(6))
      }
    }
    return keys
  }

  size(): number {
    return this.keys().length
  }

  private cleanup(): void {
    const keys = this.keys()
    const entries = keys
      .map(key => ({ key, entry: this.get(key) }))
      .filter(item => item.entry)
      .sort((a, b) => a.entry!.timestamp - b.entry!.timestamp)

    // Remove oldest 25% of entries
    const toRemove = Math.ceil(entries.length * 0.25)
    for (let i = 0; i < toRemove; i++) {
      this.delete(entries[i].key)
    }
  }
}

// Main cache manager
export class CacheManager {
  private storages: Map<string, CacheStorage> = new Map()
  private stats: CacheStats = {
    hits: 0,
    misses: 0,
    size: 0,
    memoryUsage: 0,
    hitRate: 0,
    entries: 0
  }
  private cleanupTimer?: number

  constructor(private config: CacheConfig = DEFAULT_CONFIG) {
    this.initializeStorages()
    this.startCleanupTimer()
  }

  private initializeStorages(): void {
    if (this.config.storageTypes.includes('memory')) {
      this.storages.set('memory', new MemoryStorage())
    }
    
    if (typeof window !== 'undefined') {
      if (this.config.storageTypes.includes('localStorage')) {
        this.storages.set('localStorage', new BrowserStorage(localStorage))
      }
      if (this.config.storageTypes.includes('sessionStorage')) {
        this.storages.set('sessionStorage', new BrowserStorage(sessionStorage))
      }
    }
  }

  private startCleanupTimer(): void {
    this.cleanupTimer = window.setInterval(() => {
      this.cleanup()
    }, this.config.cleanupInterval)
  }

  // Get data from cache
  get<T>(key: string, storage: string = 'memory'): T | null {
    const cacheStorage = this.storages.get(storage)
    if (!cacheStorage) return null

    const entry = cacheStorage.get<T>(key)
    if (!entry) {
      this.stats.misses++
      this.updateStats()
      return null
    }

    // Check TTL
    if (Date.now() - entry.timestamp > entry.ttl) {
      cacheStorage.delete(key)
      this.stats.misses++
      this.updateStats()
      return null
    }

    // Update hit count
    entry.hits++
    cacheStorage.set(key, entry)
    this.stats.hits++
    this.updateStats()

    return entry.data
  }

  // Set data in cache
  set<T>(
    key: string, 
    data: T, 
    ttl: number = this.config.defaultTTL,
    storage: string = 'memory'
  ): void {
    const cacheStorage = this.storages.get(storage)
    if (!cacheStorage) return

    const entry: CacheEntry<T> = {
      data,
      timestamp: Date.now(),
      ttl,
      hits: 0,
      size: this.calculateSize(data)
    }

    cacheStorage.set(key, entry)
    this.stats.entries++
    this.updateStats()

    // Check memory limits
    if (this.stats.memoryUsage > this.config.maxMemoryUsage) {
      this.evictLRU(storage)
    }
  }

  // Delete from cache
  delete(key: string, storage: string = 'memory'): void {
    const cacheStorage = this.storages.get(storage)
    if (!cacheStorage) return

    cacheStorage.delete(key)
    this.stats.entries = Math.max(0, this.stats.entries - 1)
    this.updateStats()
  }

  // Clear cache
  clear(storage?: string): void {
    if (storage) {
      const cacheStorage = this.storages.get(storage)
      if (cacheStorage) {
        cacheStorage.clear()
      }
    } else {
      this.storages.forEach(storage => storage.clear())
    }
    
    this.stats = {
      hits: 0,
      misses: 0,
      size: 0,
      memoryUsage: 0,
      hitRate: 0,
      entries: 0
    }
  }

  // Check if key exists
  has(key: string, storage: string = 'memory'): boolean {
    return this.get(key, storage) !== null
  }

  // Get all keys
  keys(storage: string = 'memory'): string[] {
    const cacheStorage = this.storages.get(storage)
    return cacheStorage ? cacheStorage.keys() : []
  }

  // Invalidate by pattern
  invalidatePattern(pattern: RegExp, storage: string = 'memory'): void {
    const cacheStorage = this.storages.get(storage)
    if (!cacheStorage) return

    const keys = cacheStorage.keys().filter(key => pattern.test(key))
    keys.forEach(key => cacheStorage.delete(key))
    this.stats.entries = Math.max(0, this.stats.entries - keys.length)
    this.updateStats()
  }

  // Get cache statistics
  getStats(): CacheStats {
    return { ...this.stats }
  }

  // Cleanup expired entries
  private cleanup(): void {
    this.storages.forEach((storage, storageType) => {
      const keys = storage.keys()
      let removedCount = 0

      keys.forEach(key => {
        const entry = storage.get(key)
        if (entry && Date.now() - entry.timestamp > entry.ttl) {
          storage.delete(key)
          removedCount++
        }
      })

      this.stats.entries = Math.max(0, this.stats.entries - removedCount)
    })

    this.updateStats()
  }

  // Evict least recently used entries
  private evictLRU(storage: string): void {
    const cacheStorage = this.storages.get(storage)
    if (!cacheStorage) return

    const keys = cacheStorage.keys()
    const entries = keys
      .map(key => ({ key, entry: cacheStorage.get(key) }))
      .filter(item => item.entry)
      .sort((a, b) => a.entry!.timestamp - b.entry!.timestamp)

    // Remove oldest 20% of entries
    const toRemove = Math.ceil(entries.length * 0.2)
    for (let i = 0; i < toRemove; i++) {
      cacheStorage.delete(entries[i].key)
      this.stats.entries--
    }

    this.updateStats()
  }

  // Calculate data size
  private calculateSize(data: any): number {
    return JSON.stringify(data).length * 2 // Rough estimate in bytes
  }

  // Update statistics
  private updateStats(): void {
    this.stats.hitRate = this.stats.hits / Math.max(1, this.stats.hits + this.stats.misses)
    
    let totalSize = 0
    let totalMemory = 0
    let totalEntries = 0

    this.storages.forEach(storage => {
      const keys = storage.keys()
      totalEntries += keys.length
      
      keys.forEach(key => {
        const entry = storage.get(key)
        if (entry) {
          totalSize += entry.size
          totalMemory += entry.size
        }
      })
    })

    this.stats.size = totalSize
    this.stats.memoryUsage = totalMemory
    this.stats.entries = totalEntries
  }

  // Destroy cache manager
  destroy(): void {
    if (this.cleanupTimer) {
      clearInterval(this.cleanupTimer)
    }
    this.clear()
  }
}

// Global cache instance
export const cache = new CacheManager()

// Utility functions
export const createCacheKey = (...parts: (string | number)[]): string => {
  return parts.join(':')
}

export const generateCacheKey = (prefix: string, params: Record<string, any> = {}): string => {
  const sortedParams = Object.keys(params)
    .sort()
    .map(key => `${key}=${params[key]}`)
    .join('&')
  
  return `${prefix}${sortedParams ? `?${sortedParams}` : ''}`
}

// Cache decorator for functions
export const cached = <T extends (...args: any[]) => any>(
  fn: T,
  options: {
    keyGenerator?: (...args: Parameters<T>) => string
    ttl?: number
    storage?: string
  } = {}
): T => {
  const {
    keyGenerator = (...args) => `fn_${fn.name}_${JSON.stringify(args)}`,
    ttl = DEFAULT_CONFIG.defaultTTL,
    storage = 'memory'
  } = options

  return ((...args: Parameters<T>) => {
    const key = keyGenerator(...args)
    
    let result = cache.get<ReturnType<T>>(key, storage)
    if (result === null) {
      result = fn(...args)
      cache.set(key, result, ttl, storage)
    }
    
    return result
  }) as T
}

// React-like cache hook for Vue composables
export const useCache = () => {
  return {
    get: cache.get.bind(cache),
    set: cache.set.bind(cache),
    delete: cache.delete.bind(cache),
    clear: cache.clear.bind(cache),
    has: cache.has.bind(cache),
    keys: cache.keys.bind(cache),
    invalidatePattern: cache.invalidatePattern.bind(cache),
    getStats: cache.getStats.bind(cache)
  }
} 